#! / usr / bin / env


# Import modules
import sys
import os
import numpy as np
import geopandas as gpd
import pandas as pd
from rasterstats import zonal_stats
from datetime import datetime

# Pass run detail
path_local_data = '/p/tmp/mester/'
path_local_data = '/p/tmp/mester/'

crs = {'init': 'epsg:4326'}




#%%

"""Compute affected entities (mean/sum) and socio-economic properties."""


def compute_affected(path_entity, zonal_stats_function, flood_shape):
    stat = zonal_stats(flood_shape,
                       path_entity,
                       all_touched=True,
                       stats=[zonal_stats_function])
    stat = pd.DataFrame(stat).sum()

    try:
        stat = round(stat, 5)
    except:
        stat = 0

    return (stat[0])


#%%

"""Main analysis function. 

Loading and preparing the data, perform matching process, and compute affected entities and socio-economic properties.
"""


###

def main():
    # Load and prepare data

    # Load DFO flood hazard data
    path_satellite_shape_files_final = f"{path_local_data}cluster_jobs/FLODIS_GFD_preprocessing/satellite_shape_files_final/"
    DFO_hydrosheds = gpd.read_file(f"{path_local_data}data/disaster/DFO/gfd_v1_4/shp_files/dfo_polys_20191203_ISO3_hydroSHEDS.shp")



    DFO = pd.DataFrame()

    for filename in sorted(os.listdir(path_satellite_shape_files_final)):


        if "shp" in filename:

            # initialize temporary DFO pandasframe where all data is stored
            DFO_temp = pd.DataFrame()

            # read in dfo shape file
            dfo_shape = gpd.read_file(f"{path_satellite_shape_files_final}{filename}")

            # get dfo idcd
            dfo_id = filename.split('_')[1]

            dfo_sheds_sub = DFO_hydrosheds.loc[DFO_hydrosheds['ID']==int(dfo_id)]

            # get dfo geometry
            dfo_geometry = dfo_shape['geometry']


            # get flood duration
           # dfo_duration = dfo_sjaÃ¼e['Duration']

            # get dfo year
            dfo_year = filename.split('_')[3]
            NatCat_year = dfo_year.split('.')[0]

            ## define dictionaries with variables
            affected_sum_dict = {
                "GDP_affected_sum": f"{path_local_data}data/gdp/kummu_etal/GDP/GDP_{NatCat_year}.tif",
                "cable_affected_sum": f"{path_local_data}data/CISI/cable.tif",
                "plant_affected_sum": f"{path_local_data}data/CISI/plant.tif",
                "power_pole_affected_sum": f"{path_local_data}data/CISI/power_pole.tif",
                "power_tower_affected_sum": f"{path_local_data}data/CISI/power_tower.tif",
                "line_affected_sum": f"{path_local_data}data/CISI/line.tif",
                "mast_affected_sum": f"{path_local_data}data/CISI/mast.tif",
                "communication_tower_affected_sum": f"{path_local_data}data/CISI/communication_tower.tif",
                "doctors_affected_sum": f"{path_local_data}data/CISI/doctors.tif",
                "hospital_affected_sum": f"{path_local_data}data/CISI/hospital.tif",
                "pharmacy_affected_sum": f"{path_local_data}data/CISI/pharmacy.tif",
                "primary_road_affected_sum": f"{path_local_data}data/CISI/primary.tif",
                "tertiary_road_affected_sum": f"{path_local_data}data/CISI/tertiary.tif",
                "reservoir_affected_sum": f"{path_local_data}data/CISI/reservoir.tif",
                "school_affected_sum": f"{path_local_data}data/CISI/school.tif",
                "university_affected_sum": f"{path_local_data}data/CISI/university.tif"}

            affected_mean_dict = {
                "GDP_affected_mean": f"{path_local_data}data/gdp/kummu_etal/GDP/GDP_{NatCat_year}.tif",
                "education_affected_mean": f"{path_local_data}data/CISI/education.tif",
                "energy_affected_mean": f"{path_local_data}data/CISI/energy.tif",
                "health_affected_mean": f"{path_local_data}data/CISI/health.tif",
                "telecommunication_affected_mean": f"{path_local_data}data/CISI/telecommunication.tif",
                "transportation_affected_mean": f"{path_local_data}data/CISI/transportation.tif",
                "water_affected_mean": f"{path_local_data}data/CISI/water.tif",
                "CISI_global_affected_mean": f"{path_local_data}data/CISI/CISI_global.tif",
                "cable_affected_mean": f"{path_local_data}data/CISI/cable.tif",
                "plant_affected_mean": f"{path_local_data}data/CISI/plant.tif",
                "power_pole_affected_mean": f"{path_local_data}data/CISI/power_pole.tif",
                "power_tower_affected_mean": f"{path_local_data}data/CISI/power_tower.tif",
                "line_affected_mean": f"{path_local_data}data/CISI/line.tif",
                "mast_affected_mean": f"{path_local_data}data/CISI/mast.tif",
                "communication_tower_affected_mean": f"{path_local_data}data/CISI/communication_tower.tif",
                "doctors_affected_mean": f"{path_local_data}data/CISI/doctors.tif",
                "hospital_affected_mean": f"{path_local_data}data/CISI/hospital.tif",
                "pharmacy_affected_mean": f"{path_local_data}data/CISI/pharmacy.tif",
                "primary_road_affected_mean": f"{path_local_data}data/CISI/primary.tif",
                "tertiary_road_affected_mean": f"{path_local_data}data/CISI/tertiary.tif",
                "reservoir_affected_mean": f"{path_local_data}data/CISI/reservoir.tif",
                "school_affected_mean": f"{path_local_data}data/CISI/school.tif",
                "university_affected_mean": f"{path_local_data}data/CISI/university.tif",
                "GDPpc_mean": f"{path_local_data}data/gdp/kummu_etal/GDPpc/GDPpc_{NatCat_year}.tif",
                "HDI_mean": f"{path_local_data}data/gdp/kummu_etal/HDI/HDI_{NatCat_year}.tif",
                "urbanization_mean": f"{path_local_data}data/landuse/urbanization/urbanization_{NatCat_year}.tif",
                "landuse_total_mean": f"{path_local_data}data/landuse/landuse_total/landuse_total_{NatCat_year}.tif",
                "elevation": f"{path_local_data}data/earthenv_topography/elevation_1KMmn_GMTEDmn.tif",
                "roughness": f"{path_local_data}data/earthenv_topography/roughness_1KMmn_GMTEDmd.tif",
                "slope": f"{path_local_data}data/earthenv_topography/slope_1KMmn_GMTEDmd.tif",
                "female_mean": f"{path_local_data}data/demographic/female_perc.tif",
                "pop_0_14_mean": f"{path_local_data}data/demographic/pop_0_14_perc.tif",
                "pop_65_plus_mean": f"{path_local_data}data/demographic/pop_65_plus_perc.tif",
                "FLOPROS_merged_mean": f"{path_local_data}data/FLOPROS/FLOPROS_merged.tif",
                "FLOPROS_modeled_mean": f"{path_local_data}data/FLOPROS/FLOPROS_modeled.tif"}

            # calculate flooded area
            DFO_satellite_shape_area = dfo_shape['geometry'].to_crs({'proj': 'cea'})
            print(round((dfo_shape.unary_union.area)))
            DFO_satellite_shape_area = round((DFO_satellite_shape_area.unary_union.area) / (10 ** 6), 5)  # in km2
            print(DFO_satellite_shape_area)

            DFO_satellite_shape = dfo_shape.unary_union

            # Affected people and pop density - GPW
            stat = zonal_stats(DFO_satellite_shape,
                               f"{path_local_data}data/population/GPW_population_interpolated/gpw_population_{NatCat_year}_30_sec.tif",
                               all_touched=True,
                               stats=['sum'])
            summed_population = np.round(np.float32(pd.DataFrame(stat).iloc[0][0]), 0)

            pop_density_GPW = int(summed_population) / (DFO_satellite_shape_area)

            stat = zonal_stats(DFO_satellite_shape,
                               f"{path_local_data}data/population/GPW_population_interpolated/gpw_population_{NatCat_year}_30_sec.tif",
                               all_touched=True,
                               stats=['mean'])
            mean_population = np.round(np.float32(pd.DataFrame(stat).iloc[0][0]), 0)

            # Affected people and pop density - GHSL - 30 arc seconds
            stat = zonal_stats(DFO_satellite_shape,
                               f"{path_local_data}data/population/GHSL_population_resampled_30_arcsec/ghsl_population_{NatCat_year}_30_sec.tif",
                               all_touched=True,
                               stats=['sum'])
            ghsl_population_sum = np.round(np.float32(pd.DataFrame(stat).iloc[0][0]), 0)

            stat = zonal_stats(DFO_satellite_shape,
                               f"{path_local_data}data/population/GHSL_population_resampled_30_arcsec/ghsl_population_{NatCat_year}_30_sec.tif",
                               all_touched=True,
                               stats=['mean'])
            ghsl_population_mean = np.round(np.float32(pd.DataFrame(stat).iloc[0][0]), 0)

            pop_density_GHSL = int(ghsl_population_mean) / (DFO_satellite_shape_area)

            # Iterate over all critical infrastructre value
            affected_sum_list = []
            affected_mean_list = []
            for variable_single in affected_sum_dict.items():
                affected_sum_list.append(compute_affected(variable_single[1], 'sum', DFO_satellite_shape))



            for variable_single in affected_mean_dict.items():
                affected_mean_list.append(compute_affected(variable_single[1], 'mean', DFO_satellite_shape))



            for file in os.listdir(f"{path_local_data}data/forests/resampled/"):
                stat = zonal_stats(DFO_satellite_shape,
                                   f"{path_local_data}data/forests/resampled/" + file,
                                   all_touched=True,
                                   stats=['mean'])

                mean_forest_cover = pd.DataFrame(stat).mean()[0]

                if mean_forest_cover >= 0:
                    mean_forest_cover = mean_forest_cover/ 100

                    forest_area_average = round(np.mean(mean_forest_cover), 5)



            ## store all values in DFO geopandas dataframe

            DFO_temp.loc[0, 'DFO_ID'] = dfo_id
            DFO_temp['year'] = NatCat_year
            # DFO_temp['DFO_duration'] = DFO_duration_list
            DFO_temp['DFO_satellite_shape_area'] = DFO_satellite_shape_area
            DFO_temp['affected_sum_GHSL'] = ghsl_population_sum
            DFO_temp['affected_mean_GHSL'] = ghsl_population_mean
            DFO_temp['DFO_satellite_shape_pop_density_GHSL'] = pop_density_GHSL
            DFO_temp['affected_sum_GPW'] = summed_population
            DFO_temp['affected_mean_GPW'] = mean_population
            DFO_temp['DFO_satellite_shape_pop_density_GPW'] = pop_density_GPW

            for variable_single, variable_single_counter in zip(affected_sum_dict.items(),
                                                                range(len(affected_sum_dict))):
                DFO_temp[variable_single[0]] = affected_sum_list[variable_single_counter]

            for variable_single, variable_single_counter in zip(affected_mean_dict.items(),
                                                                range(len(affected_mean_dict))):
                DFO_temp[variable_single[0]] = affected_mean_list[variable_single_counter]

            DFO_temp['forest_cover_mean'] = forest_area_average
            DFO_temp['fatalities'] = dfo_sheds_sub['Dead'].sum()
            DFO_temp['displaced'] = dfo_sheds_sub['Displaced'].sum()


            DFO = DFO.append(DFO_temp, ignore_index = True)

            DFO.to_csv(f"DFO_exposure.csv")



    print('Script complete')

if __name__ == "__main__":
    main()
